#include <iostream>
#include <vector>
#include <string>
using namespace std;

bool IsMatch(const string& s, const string& p) {
    int m = s.size();
    int n = p.size();
    // dp[i][j] означает, что s[0..i-1] соответствует p[0..j-1]
    vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));
    // Пустая строка соответствует пустой маске
    dp[0][0] = true;
    // Заполняем первую строку (случай, когда s пустая, но p не пустая)
    for (int j = 1; j <= n; ++j) {
        if (p[j - 1] == '*') {
            dp[0][j] = dp[0][j - 1];
        }
    }
    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            if (p[j - 1] == '*') {
                // '*' может соответствовать:
                // 1. Пустой строке (dp[i][j-1])
                // 2. Одному или нескольким символам (dp[i-1][j])
                dp[i][j] = dp[i][j - 1] || dp[i - 1][j];
            }
            else if (p[j - 1] == '.' || p[j - 1] == s[i - 1]) {
                // Обычный символ или '.'
                dp[i][j] = dp[i - 1][j - 1];
            }
            else {
                dp[i][j] = false;
            }
        }
    }
    return dp[m][n];
}

int main() {
    string p, s;

    // Пример 1: true
    p = "*nm*n*";
    s = "23knm789nmnnnmknnnn";
    cout << IsMatch(s, p) << endl;  // Ожидаем 1 (true)
    return 0;
}
